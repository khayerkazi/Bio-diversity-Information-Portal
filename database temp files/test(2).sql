CREATE TABLE  "ADMIN"
   (    "ADMINID" NUMBER(11,0),
    "USERNAME" VARCHAR2(30) NOT NULL ENABLE,
    "PASSWORD" VARCHAR2(40) NOT NULL ENABLE,
    "DESIGNATIONDATE" DATE,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "EMAIL" VARCHAR2(30) NOT NULL ENABLE,
    "ADDRESS" VARCHAR2(50),
     CONSTRAINT "ADMIN_PK" PRIMARY KEY ("ADMINID") ENABLE
   ) ;

CREATE TABLE  "PHYLUM"
   (    "PHYLUMID" NUMBER(11,0),
    "KINGDOMID" NUMBER(11,0) NOT NULL ENABLE,
    "LASTMODIFIED" DATE,
    "NAME" VARCHAR2(30),
    "DESCRIPTION" VARCHAR2(1000),
     CONSTRAINT "PHYLUM_PK" PRIMARY KEY ("PHYLUMID") ENABLE
   ) ;

CREATE TABLE  "CLASS"
   (    "CLASSID" NUMBER(11,0),
    "PHYLUMID" NUMBER(11,0) NOT NULL ENABLE,
    "LASTMODIFIED",
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) NOT NULL ENABLE,
     CONSTRAINT "CLASS_PK" PRIMARY KEY ("CLASSID") ENABLE
   ) ;

CREATE TABLE  "DOE"
   (    "DOEID" NUMBER(11,0) ,
    "USERNAME" VARCHAR2(30) NOT NULL ENABLE,
    "PASSWORD" VARCHAR2(40) NOT NULL ENABLE,
    "DESIGNATIONDATE" DATE ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "EMAIL" VARCHAR2(30) NOT NULL ENABLE,
    "ADDRESS" VARCHAR2(50) NOT NULL ENABLE,
     CONSTRAINT "DOE_PK" PRIMARY KEY ("DOEID") ENABLE
   ) ;

CREATE TABLE  "ORD"
   (    "ORDERID" NUMBER(11,0) ,
    "CLASSID" NUMBER(11,0) NOT NULL ENABLE,
    "LASTMODIFIED" DATE ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) ,
     CONSTRAINT "ORD_PK" PRIMARY KEY ("ORDERID") ENABLE
   ) ;

CREATE TABLE  "FAMILY"
   (    "FAMILYID" NUMBER(11,0) ,
    "ORDERID" NUMBER(11,0) NOT NULL ENABLE,
    "LASTMODIFIED" DATE ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) ,
     CONSTRAINT "FAMILY_PK" PRIMARY KEY ("FAMILYID") ENABLE
   ) ;

CREATE TABLE  "GENUS"
   (    "GENUSID" NUMBER(11,0) ,
    "FAMILYID" NUMBER(11,0) NOT NULL ENABLE,
    "LASTMODIFIED" DATE ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) ,
     CONSTRAINT "GENUS_PK" PRIMARY KEY ("GENUSID") ENABLE
   ) ;

CREATE TABLE  "KINGDOM"
   (    "KINGDOMID" NUMBER(11,0),
    "LASTMODIFIED" DATE ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) ,
     CONSTRAINT "KINGDOM_PK" PRIMARY KEY ("KINGDOMID") ENABLE
   ) ;

CREATE TABLE  "SPECIES"
   (    "SPECIESID" NUMBER(11,0) ,
    "GENUSID" NUMBER(11,0) NOT NULL ENABLE,
    "LASTMODIFIED" DATE ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) ,
     CONSTRAINT "SPECIES_PK" PRIMARY KEY ("SPECIESID") ENABLE
   ) ;

CREATE TABLE  "DOCUMENT"
   (    "DOCUMENTID" NUMBER(11,0) ,
    "ENTRYID" NUMBER(11,0) ,
    "KINGDOMID" NUMBER(11,0) NOT NULL ENABLE,
    "PHYLUMID" NUMBER(11,0) NOT NULL ENABLE,
    "CLASSID" NUMBER(11,0) NOT NULL ENABLE,
    "ORDERID" NUMBER(11,0) NOT NULL ENABLE,
    "FAMILYID" NUMBER(11,0) NOT NULL ENABLE,
    "GENUSID" NUMBER(11,0) NOT NULL ENABLE,
    "SPECIESID" NUMBER(11,0) NOT NULL ENABLE,
     CONSTRAINT "DOCUMENT_PK" PRIMARY KEY ("DOCUMENTID") ENABLE
   ) ;

CREATE TABLE  "POTENTIADOCS"
   (    "POTENTIALID" NUMBER(11,0) ,
    "ENTRYID" NUMBER(11,0) NOT NULL ENABLE,
    "PROPOSEDDATE" DATE NOT NULL ENABLE,
    "REPLACEID" NUMBER(11,0) ,
    "NAME" VARCHAR2(30) NOT NULL ENABLE,
    "DESCRIPTION" VARCHAR2(1000) NOT NULL ENABLE,
    "KINGDOMID" NUMBER(11,0) NOT NULL ENABLE,
    "PHYLUMID" NUMBER(11,0) NOT NULL ENABLE,
    "CLASSID" NUMBER(11,0) NOT NULL ENABLE,
    "ORDERID" NUMBER(11,0) NOT NULL ENABLE,
    "FAMILYID" NUMBER(11,0) NOT NULL ENABLE,
    "GENUSID" NUMBER(11,0) NOT NULL ENABLE,
     CONSTRAINT "POTENTIADOCS_PK" PRIMARY KEY ("POTENTIALID") ENABLE
   ) ;

ALTER TABLE  "CLASS" ADD CONSTRAINT "CLASS_FK" FOREIGN KEY ("PHYLUMID")
      REFERENCES  "PHYLUM" ("PHYLUMID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK" FOREIGN KEY ("ENTRYID")
      REFERENCES  "DOE" ("DOEID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK2" FOREIGN KEY ("KINGDOMID")
      REFERENCES  "KINGDOM" ("KINGDOMID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK3" FOREIGN KEY ("PHYLUMID")
      REFERENCES  "PHYLUM" ("PHYLUMID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK4" FOREIGN KEY ("CLASSID")
      REFERENCES  "CLASS" ("CLASSID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK5" FOREIGN KEY ("ORDERID")
      REFERENCES  "ORD" ("ORDERID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK6" FOREIGN KEY ("FAMILYID")
      REFERENCES  "FAMILY" ("FAMILYID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK7" FOREIGN KEY ("GENUSID")
      REFERENCES  "GENUS" ("GENUSID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "DOCUMENT" ADD CONSTRAINT "DOCUMENT_FK8" FOREIGN KEY ("SPECIESID")
      REFERENCES  "SPECIES" ("SPECIESID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "FAMILY" ADD CONSTRAINT "FAMILY_FK" FOREIGN KEY ("ORDERID")
      REFERENCES  "ORD" ("ORDERID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "GENUS" ADD CONSTRAINT "GENUS_FK" FOREIGN KEY ("FAMILYID")
      REFERENCES  "FAMILY" ("FAMILYID") ENABLE;
ALTER TABLE  "ORD" ADD CONSTRAINT "ORD_FK" FOREIGN KEY ("CLASSID")
      REFERENCES  "CLASS" ("CLASSID") ENABLE;
ALTER TABLE  "PHYLUM" ADD CONSTRAINT "PHYLUM_FK" FOREIGN KEY ("KINGDOMID")
      REFERENCES  "KINGDOM" ("KINGDOMID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK10" FOREIGN KEY ("ORDERID")
      REFERENCES  "ORD" ("ORDERID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK11" FOREIGN KEY ("FAMILYID")
      REFERENCES  "ORD" ("ORDERID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK12" FOREIGN KEY ("GENUSID")
      REFERENCES  "GENUS" ("GENUSID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK4" FOREIGN KEY ("PHYLUMID")
      REFERENCES  "PHYLUM" ("PHYLUMID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK6" FOREIGN KEY ("ENTRYID")
      REFERENCES  "DOE" ("DOEID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK7" FOREIGN KEY ("REPLACEID")
      REFERENCES  "DOCUMENT" ("DOCUMENTID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK8" FOREIGN KEY ("KINGDOMID")
      REFERENCES  "KINGDOM" ("KINGDOMID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "POTENTIADOCS" ADD CONSTRAINT "POTENTIADOCS_FK9" FOREIGN KEY ("CLASSID")
      REFERENCES  "CLASS" ("CLASSID") ON DELETE CASCADE ENABLE;
ALTER TABLE  "SPECIES" ADD CONSTRAINT "SPECIES_FK" FOREIGN KEY ("GENUSID")
      REFERENCES  "GENUS" ("GENUSID") ON DELETE CASCADE ENABLE;

CREATE OR REPLACE FUNCTION  "CUSTOM_AUTH" (p_username in VARCHAR2, p_password in VARCHAR2)
return BOOLEAN
is
  l_password varchar2(4000);
  l_stored_password varchar2(4000);
  l_expires_on date;
  l_count number;
begin
-- First, check to see if the user is in the user table
select count(*) into l_count from demo_users where user_name = p_username;
if l_count > 0 then
  -- First, we fetch the stored hashed password & expire date
  select password, expires_on into l_stored_password, l_expires_on
   from demo_users where user_name = p_username;

  -- Next, we check to see if the user's account is expired
  -- If it is, return FALSE
  if l_expires_on > sysdate or l_expires_on is null then

    -- If the account is not expired, we have to apply the custom hash
    -- function to the password
    l_password := custom_hash(p_username, p_password);

    -- Finally, we compare them to see if they are the same and return
    -- either TRUE or FALSE
    if l_password = l_stored_password then
      return true;
    else
      return false;
    end if;
  else
    return false;
  end if;
else
  -- The username provided is not in the DEMO_USERS table
  return false;
end if;
end;
/
/
CREATE OR REPLACE FUNCTION  "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2)
return varchar2
is
  l_password varchar2(4000);
  l_salt varchar2(4000) := 'GQ6DK9G8J5QVHX0L3KCF8WS8IVAYLU';
begin

-- This function should be wrapped, as the hash algorhythm is exposed here.
-- You can change the value of l_salt or the method of which to call the
-- DBMS_OBFUSCATOIN toolkit, but you much reset all of your passwords
-- if you choose to do this.

l_password := utl_raw.cast_to_raw(dbms_obfuscation_toolkit.md5
  (input_string => p_password || substr(l_salt,10,13) || p_username ||
    substr(l_salt, 4,10)));
return l_password;
end;
/
/
CREATE UNIQUE INDEX  "PHYLUM_PK" ON  "PHYLUM" ("PHYLUMID") ;
CREATE UNIQUE INDEX  "KINGDOM_PK" ON  "KINGDOM" ("KINGDOMID")  ;
CREATE UNIQUE INDEX  "CLASS_PK" ON  "CLASS" ("CLASSID")   ;
CREATE UNIQUE INDEX  "ORD_PK" ON  "ORD" ("ORDERID")   ;
CREATE UNIQUE INDEX  "FAMILY_PK" ON  "FAMILY" ("FAMILYID")  ;
CREATE UNIQUE INDEX  "GENUS_PK" ON  "GENUS" ("GENUSID")   ;
CREATE UNIQUE INDEX  "SPECIES_PK" ON  "SPECIES" ("SPECIESID")   ;
CREATE UNIQUE INDEX  "ADMIN_PK" ON  "ADMIN" ("ADMINID")   ;
CREATE UNIQUE INDEX  "DOE_PK" ON  "DOE" ("DOEID")   ;
CREATE UNIQUE INDEX  "DOCUMENT_PK" ON  "DOCUMENT" ("DOCUMENTID")   ;
CREATE UNIQUE INDEX  "POTENTIADOCS_PK" ON  "POTENTIADOCS" ("POTENTIALID")   ;

CREATE SEQUENCE   "ADMIN_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "CLASS_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_CUST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_ORDER_ITEMS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_ORD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_PROD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DOCUMENT_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DOE_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "FAMILY_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "GENUS_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "KINGDOM_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "ORD_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "PHYLUM_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "POTENTIADOCS_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "SPECIES_AUTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "TABLE2_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;CREATE OR REPLACE TRIGGER  "BI_ADMIN"
  before insert on "ADMIN"
  for each row
begin
  if :NEW."ADMINID" is null then
    select "ADMIN_AUTO_SEQ".nextval into :NEW."ADMINID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_ADMIN" ENABLE;

CREATE OR REPLACE TRIGGER  "BI_CLASS"
  before insert on "CLASS"
  for each row
begin
  if :NEW."CLASSID" is null then
    select "CLASS_AUTO_SEQ".nextval into :NEW."CLASSID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_CLASS" ENABLE;

CREATE OR REPLACE TRIGGER  "BI_DOCUMENT"
  before insert on "DOCUMENT"
  for each row
begin
  if :NEW."DOCUMENTID" is null then
    select "DOCUMENT_AUTO_SEQ".nextval into :NEW."DOCUMENTID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_DOCUMENT" ENABLE;

CREATE OR REPLACE TRIGGER  "BI_DOE"
  before insert on "DOE"
  for each row
begin
  if :NEW."DOEID" is null then
    select "DOE_AUTO_SEQ".nextval into :NEW."DOEID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_DOE" ENABLE;CREATE OR REPLACE TRIGGER  "BI_FAMILY"
  before insert on "FAMILY"
  for each row
begin
  if :NEW."FAMILYID" is null then
    select "FAMILY_AUTO_SEQ".nextval into :NEW."FAMILYID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_FAMILY" ENABLE;CREATE OR REPLACE TRIGGER  "BI_GENUS"
  before insert on "GENUS"
  for each row
begin
  if :NEW."GENUSID" is null then
    select "GENUS_AUTO_SEQ".nextval into :NEW."GENUSID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_GENUS" ENABLE;CREATE OR REPLACE TRIGGER  "BI_KINGDOM"
  before insert on "KINGDOM"
  for each row
begin
  if :NEW."KINGDOMID" is null then
    select "KINGDOM_AUTO_SEQ".nextval into :NEW."KINGDOMID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_KINGDOM" ENABLE;

CREATE OR REPLACE TRIGGER  "BI_ORD"
  before insert on "ORD"
  for each row
begin
  if :NEW."ORDERID" is null then
    select "ORD_AUTO_SEQ".nextval into :NEW."ORDERID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_ORD" ENABLE;CREATE OR REPLACE TRIGGER  "BI_PHYLUM"
  before insert on "PHYLUM"
  for each row
begin
  if :NEW."PHYLUMID" is null then
    select "PHYLUM_AUTO_SEQ".nextval into :NEW."PHYLUMID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_PHYLUM" ENABLE;CREATE OR REPLACE TRIGGER  "BI_POTENTIADOCS"
  before insert on "POTENTIADOCS"
  for each row
begin
  if :NEW."POTENTIALID" is null then
    select "POTENTIADOCS_AUTO_SEQ".nextval into :NEW."POTENTIALID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_POTENTIADOCS" ENABLE;CREATE OR REPLACE TRIGGER  "BI_SPECIES"
  before insert on "SPECIES"
  for each row
begin
  if :NEW."SPECIESID" is null then
    select "SPECIES_AUTO_SEQ".nextval into :NEW."SPECIESID" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_SPECIES" ENABLE;